2023-11-23 11:04:51,212   INFO  **********************Start logging**********************
2023-11-23 11:04:51,214   INFO  CUDA_VISIBLE_DEVICES=2
2023-11-23 11:04:51,215   INFO  Training with a single process
2023-11-23 11:04:51,215   INFO  cfg_file         ./tools/cfgs/nuscenes_models/unitr_cam.yaml
2023-11-23 11:04:51,215   INFO  batch_size       3
2023-11-23 11:04:51,216   INFO  epochs           10
2023-11-23 11:04:51,216   INFO  workers          4
2023-11-23 11:04:51,217   INFO  extra_tag        default
2023-11-23 11:04:51,217   INFO  ckpt             None
2023-11-23 11:04:51,217   INFO  pretrained_model None
2023-11-23 11:04:51,218   INFO  launcher         none
2023-11-23 11:04:51,218   INFO  tcp_port         18888
2023-11-23 11:04:51,218   INFO  sync_bn          False
2023-11-23 11:04:51,219   INFO  fix_random_seed  False
2023-11-23 11:04:51,219   INFO  ckpt_save_interval 1
2023-11-23 11:04:51,220   INFO  local_rank       0
2023-11-23 11:04:51,220   INFO  max_ckpt_save_num 30
2023-11-23 11:04:51,220   INFO  merge_all_iters_to_one_epoch False
2023-11-23 11:04:51,221   INFO  set_cfgs         None
2023-11-23 11:04:51,221   INFO  max_waiting_mins 0
2023-11-23 11:04:51,221   INFO  start_epoch      0
2023-11-23 11:04:51,222   INFO  num_epochs_to_eval 0
2023-11-23 11:04:51,222   INFO  save_to_file     False
2023-11-23 11:04:51,222   INFO  use_tqdm_to_record False
2023-11-23 11:04:51,223   INFO  logger_iter_interval 50
2023-11-23 11:04:51,223   INFO  ckpt_save_time_interval 300
2023-11-23 11:04:51,224   INFO  wo_gpu_stat      False
2023-11-23 11:04:51,224   INFO  use_amp          False
2023-11-23 11:04:51,224   INFO  eval_map         False
2023-11-23 11:04:51,225   INFO  cfg.ROOT_DIR: /mnt/sdb/yc/UniTR-main
2023-11-23 11:04:51,225   INFO  cfg.LOCAL_RANK: 0
2023-11-23 11:04:51,226   INFO  cfg.CLASS_NAMES: ['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone']
2023-11-23 11:04:51,226   INFO  ----------- DATA_CONFIG -----------
2023-11-23 11:04:51,226   INFO  cfg.DATA_CONFIG.DATASET: NuScenesDataset
2023-11-23 11:04:51,227   INFO  cfg.DATA_CONFIG.DATA_PATH: data/nuscenes
2023-11-23 11:04:51,227   INFO  cfg.DATA_CONFIG.VERSION: v1.0-mini
2023-11-23 11:04:51,227   INFO  cfg.DATA_CONFIG.MAX_SWEEPS: 10
2023-11-23 11:04:51,228   INFO  cfg.DATA_CONFIG.PRED_VELOCITY: True
2023-11-23 11:04:51,228   INFO  cfg.DATA_CONFIG.SET_NAN_VELOCITY_TO_ZEROS: True
2023-11-23 11:04:51,228   INFO  cfg.DATA_CONFIG.FILTER_MIN_POINTS_IN_GT: 1
2023-11-23 11:04:51,229   INFO  ----------- DATA_SPLIT -----------
2023-11-23 11:04:51,229   INFO  cfg.DATA_CONFIG.DATA_SPLIT.train: train
2023-11-23 11:04:51,229   INFO  cfg.DATA_CONFIG.DATA_SPLIT.test: val
2023-11-23 11:04:51,230   INFO  ----------- INFO_PATH -----------
2023-11-23 11:04:51,230   INFO  cfg.DATA_CONFIG.INFO_PATH.train: ['nuscenes_infos_10sweeps_train.pkl']
2023-11-23 11:04:51,230   INFO  cfg.DATA_CONFIG.INFO_PATH.test: ['nuscenes_infos_10sweeps_val.pkl']
2023-11-23 11:04:51,231   INFO  cfg.DATA_CONFIG.POINT_CLOUD_RANGE: [-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]
2023-11-23 11:04:51,231   INFO  cfg.DATA_CONFIG.BALANCED_RESAMPLING: True
2023-11-23 11:04:51,231   INFO  ----------- DATA_AUGMENTOR -----------
2023-11-23 11:04:51,232   INFO  cfg.DATA_CONFIG.DATA_AUGMENTOR.DISABLE_AUG_LIST: ['placeholder']
2023-11-23 11:04:51,232   INFO  cfg.DATA_CONFIG.DATA_AUGMENTOR.AUG_CONFIG_LIST: [{'NAME': 'gt_sampling', 'IMG_AUG_TYPE': 'nuscenes', 'IMG_AUG_MIXUP': 0.7, 'DB_INFO_PATH': ['nuscenes_dbinfos_10sweeps_withvelo.pkl'], 'PREPARE': {'filter_by_min_points': ['car:5', 'truck:5', 'construction_vehicle:5', 'bus:5', 'trailer:5', 'barrier:5', 'motorcycle:5', 'bicycle:5', 'pedestrian:5', 'traffic_cone:5']}, 'USE_SHARED_MEMORY': False, 'DB_DATA_PATH': ['nuscenes_10sweeps_withvelo_lidar.npy', 'nuscenes_10sweeps_withvelo_img.npy'], 'SAMPLE_GROUPS': ['car:2', 'truck:3', 'construction_vehicle:7', 'bus:4', 'trailer:6', 'barrier:2', 'motorcycle:6', 'bicycle:6', 'pedestrian:2', 'traffic_cone:2'], 'NUM_POINT_FEATURES': 5, 'DATABASE_WITH_FAKELIDAR': False, 'REMOVE_EXTRA_WIDTH': [0.0, 0.0, 0.0], 'LIMIT_WHOLE_SCENE': True, 'use_hf': False, 'fr_path': '/private_dataset/nuscenes_pcdet/v1.0-trainval/gt_database_10sweeps_withvelo', 'fr_num': 54899}, {'NAME': 'random_world_flip', 'ALONG_AXIS_LIST': ['x', 'y']}, {'NAME': 'random_world_rotation', 'WORLD_ROT_ANGLE': [-0.78539816, 0.78539816]}, {'NAME': 'random_world_scaling', 'WORLD_SCALE_RANGE': [0.9, 1.1]}, {'NAME': 'random_world_translation', 'NOISE_TRANSLATE_STD': [0.5, 0.5, 0.5]}, {'NAME': 'imgaug', 'ROT_LIM': [-5.4, 5.4], 'RAND_FLIP': True}]
2023-11-23 11:04:51,233   INFO  ----------- POINT_FEATURE_ENCODING -----------
2023-11-23 11:04:51,233   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.encoding_type: absolute_coordinates_encoding
2023-11-23 11:04:51,233   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.used_feature_list: ['x', 'y', 'z', 'intensity', 'timestamp']
2023-11-23 11:04:51,234   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.src_feature_list: ['x', 'y', 'z', 'intensity', 'timestamp']
2023-11-23 11:04:51,234   INFO  cfg.DATA_CONFIG.DATA_PROCESSOR: [{'NAME': 'mask_points_and_boxes_outside_range', 'REMOVE_OUTSIDE_BOXES': True}, {'NAME': 'shuffle_points', 'SHUFFLE_ENABLED': {'train': True, 'test': True}}, {'NAME': 'transform_points_to_voxels_placeholder', 'VOXEL_SIZE': [0.3, 0.3, 8.0]}, {'NAME': 'image_calibrate'}, {'NAME': 'image_normalize', 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}]
2023-11-23 11:04:51,234   INFO  cfg.DATA_CONFIG._BASE_CONFIG_: cfgs/dataset_configs/nuscenes_mini_dataset.yaml
2023-11-23 11:04:51,235   INFO  ----------- CAMERA_CONFIG -----------
2023-11-23 11:04:51,235   INFO  cfg.DATA_CONFIG.CAMERA_CONFIG.USE_CAMERA: True
2023-11-23 11:04:51,235   INFO  ----------- IMAGE -----------
2023-11-23 11:04:51,236   INFO  cfg.DATA_CONFIG.CAMERA_CONFIG.IMAGE.FINAL_DIM: [256, 704]
2023-11-23 11:04:51,236   INFO  cfg.DATA_CONFIG.CAMERA_CONFIG.IMAGE.RESIZE_LIM_TRAIN: [0.38, 0.55]
2023-11-23 11:04:51,237   INFO  cfg.DATA_CONFIG.CAMERA_CONFIG.IMAGE.RESIZE_LIM_TEST: [0.48, 0.48]
2023-11-23 11:04:51,237   INFO  ----------- MODEL -----------
2023-11-23 11:04:51,237   INFO  cfg.MODEL.NAME: UniTRCAM
2023-11-23 11:04:51,238   INFO  ----------- MM_BACKBONE -----------
2023-11-23 11:04:51,238   INFO  cfg.MODEL.MM_BACKBONE.NAME: UniTRCAM
2023-11-23 11:04:51,238   INFO  ----------- PATCH_EMBED -----------
2023-11-23 11:04:51,239   INFO  cfg.MODEL.MM_BACKBONE.PATCH_EMBED.in_channels: 3
2023-11-23 11:04:51,239   INFO  cfg.MODEL.MM_BACKBONE.PATCH_EMBED.image_size: [256, 704]
2023-11-23 11:04:51,239   INFO  cfg.MODEL.MM_BACKBONE.PATCH_EMBED.embed_dims: 128
2023-11-23 11:04:51,240   INFO  cfg.MODEL.MM_BACKBONE.PATCH_EMBED.patch_size: 8
2023-11-23 11:04:51,240   INFO  cfg.MODEL.MM_BACKBONE.PATCH_EMBED.patch_norm: True
2023-11-23 11:04:51,240   INFO  ----------- norm_cfg -----------
2023-11-23 11:04:51,241   INFO  cfg.MODEL.MM_BACKBONE.PATCH_EMBED.norm_cfg.type: LN
2023-11-23 11:04:51,241   INFO  ----------- IMAGE_INPUT_LAYER -----------
2023-11-23 11:04:51,241   INFO  cfg.MODEL.MM_BACKBONE.IMAGE_INPUT_LAYER.sparse_shape: [32, 88, 1]
2023-11-23 11:04:51,242   INFO  cfg.MODEL.MM_BACKBONE.IMAGE_INPUT_LAYER.d_model: [128]
2023-11-23 11:04:51,242   INFO  cfg.MODEL.MM_BACKBONE.IMAGE_INPUT_LAYER.set_info: [[90, 4]]
2023-11-23 11:04:51,242   INFO  cfg.MODEL.MM_BACKBONE.IMAGE_INPUT_LAYER.window_shape: [[30, 30, 1]]
2023-11-23 11:04:51,243   INFO  cfg.MODEL.MM_BACKBONE.IMAGE_INPUT_LAYER.hybrid_factor: [1, 1, 1]
2023-11-23 11:04:51,243   INFO  cfg.MODEL.MM_BACKBONE.IMAGE_INPUT_LAYER.shifts_list: [[[0, 0, 0], [15, 15, 0]]]
2023-11-23 11:04:51,243   INFO  cfg.MODEL.MM_BACKBONE.IMAGE_INPUT_LAYER.input_image: True
2023-11-23 11:04:51,244   INFO  ----------- LIDAR_INPUT_LAYER -----------
2023-11-23 11:04:51,244   INFO  cfg.MODEL.MM_BACKBONE.LIDAR_INPUT_LAYER.sparse_shape: [360, 360, 1]
2023-11-23 11:04:51,245   INFO  cfg.MODEL.MM_BACKBONE.LIDAR_INPUT_LAYER.d_model: [128]
2023-11-23 11:04:51,245   INFO  cfg.MODEL.MM_BACKBONE.LIDAR_INPUT_LAYER.set_info: [[90, 4]]
2023-11-23 11:04:51,245   INFO  cfg.MODEL.MM_BACKBONE.LIDAR_INPUT_LAYER.window_shape: [[30, 30, 1]]
2023-11-23 11:04:51,246   INFO  cfg.MODEL.MM_BACKBONE.LIDAR_INPUT_LAYER.hybrid_factor: [1, 1, 1]
2023-11-23 11:04:51,246   INFO  cfg.MODEL.MM_BACKBONE.LIDAR_INPUT_LAYER.shifts_list: [[[0, 0, 0], [15, 15, 0]]]
2023-11-23 11:04:51,246   INFO  cfg.MODEL.MM_BACKBONE.set_info: [[90, 4]]
2023-11-23 11:04:51,247   INFO  cfg.MODEL.MM_BACKBONE.d_model: [128]
2023-11-23 11:04:51,247   INFO  cfg.MODEL.MM_BACKBONE.nhead: [8]
2023-11-23 11:04:51,247   INFO  cfg.MODEL.MM_BACKBONE.dim_feedforward: [256]
2023-11-23 11:04:51,248   INFO  cfg.MODEL.MM_BACKBONE.dropout: 0.0
2023-11-23 11:04:51,248   INFO  cfg.MODEL.MM_BACKBONE.activation: gelu
2023-11-23 11:04:51,248   INFO  cfg.MODEL.MM_BACKBONE.checkpoint_blocks: [0, 1, 2, 3]
2023-11-23 11:04:51,249   INFO  ----------- layer_cfg -----------
2023-11-23 11:04:51,249   INFO  cfg.MODEL.MM_BACKBONE.layer_cfg.use_bn: False
2023-11-23 11:04:51,249   INFO  cfg.MODEL.MM_BACKBONE.layer_cfg.split_ffn: True
2023-11-23 11:04:51,250   INFO  cfg.MODEL.MM_BACKBONE.layer_cfg.split_residual: True
2023-11-23 11:04:51,250   INFO  cfg.MODEL.MM_BACKBONE.out_indices: []
2023-11-23 11:04:51,250   INFO  ----------- VFE -----------
2023-11-23 11:04:51,251   INFO  cfg.MODEL.VFE.NAME: DynPillarVFE
2023-11-23 11:04:51,251   INFO  cfg.MODEL.VFE.WITH_DISTANCE: False
2023-11-23 11:04:51,251   INFO  cfg.MODEL.VFE.USE_ABSLOTE_XYZ: True
2023-11-23 11:04:51,252   INFO  cfg.MODEL.VFE.USE_NORM: True
2023-11-23 11:04:51,252   INFO  cfg.MODEL.VFE.NUM_FILTERS: [128, 128]
2023-11-23 11:04:51,253   INFO  ----------- MAP_TO_BEV -----------
2023-11-23 11:04:51,253   INFO  cfg.MODEL.MAP_TO_BEV.NAME: PointPillarScatter3d
2023-11-23 11:04:51,253   INFO  cfg.MODEL.MAP_TO_BEV.INPUT_SHAPE: [360, 360, 1]
2023-11-23 11:04:51,253   INFO  cfg.MODEL.MAP_TO_BEV.NUM_BEV_FEATURES: 128
2023-11-23 11:04:51,253   INFO  ----------- BACKBONE_2D -----------
2023-11-23 11:04:51,253   INFO  cfg.MODEL.BACKBONE_2D.NAME: BaseBEVResBackbone
2023-11-23 11:04:51,253   INFO  cfg.MODEL.BACKBONE_2D.LAYER_NUMS: [1, 2, 2, 2]
2023-11-23 11:04:51,254   INFO  cfg.MODEL.BACKBONE_2D.LAYER_STRIDES: [1, 2, 2, 2]
2023-11-23 11:04:51,254   INFO  cfg.MODEL.BACKBONE_2D.NUM_FILTERS: [128, 128, 256, 256]
2023-11-23 11:04:51,254   INFO  cfg.MODEL.BACKBONE_2D.UPSAMPLE_STRIDES: [0.5, 1, 2, 4]
2023-11-23 11:04:51,254   INFO  cfg.MODEL.BACKBONE_2D.NUM_UPSAMPLE_FILTERS: [128, 128, 128, 128]
2023-11-23 11:04:51,254   INFO  ----------- DENSE_HEAD -----------
2023-11-23 11:04:51,254   INFO  cfg.MODEL.DENSE_HEAD.CLASS_AGNOSTIC: False
2023-11-23 11:04:51,255   INFO  cfg.MODEL.DENSE_HEAD.NAME: TransFusionHead
2023-11-23 11:04:51,255   INFO  cfg.MODEL.DENSE_HEAD.QUERY_RADIUS: 20
2023-11-23 11:04:51,255   INFO  cfg.MODEL.DENSE_HEAD.QUERY_LOCAL: True
2023-11-23 11:04:51,255   INFO  cfg.MODEL.DENSE_HEAD.USE_BIAS_BEFORE_NORM: True
2023-11-23 11:04:51,255   INFO  cfg.MODEL.DENSE_HEAD.NUM_PROPOSALS: 200
2023-11-23 11:04:51,255   INFO  cfg.MODEL.DENSE_HEAD.HIDDEN_CHANNEL: 128
2023-11-23 11:04:51,256   INFO  cfg.MODEL.DENSE_HEAD.NUM_CLASSES: 10
2023-11-23 11:04:51,256   INFO  cfg.MODEL.DENSE_HEAD.NUM_HEADS: 8
2023-11-23 11:04:51,256   INFO  cfg.MODEL.DENSE_HEAD.NMS_KERNEL_SIZE: 3
2023-11-23 11:04:51,256   INFO  cfg.MODEL.DENSE_HEAD.FFN_CHANNEL: 256
2023-11-23 11:04:51,256   INFO  cfg.MODEL.DENSE_HEAD.DROPOUT: 0.1
2023-11-23 11:04:51,257   INFO  cfg.MODEL.DENSE_HEAD.BN_MOMENTUM: 0.1
2023-11-23 11:04:51,257   INFO  cfg.MODEL.DENSE_HEAD.ACTIVATION: relu
2023-11-23 11:04:51,257   INFO  cfg.MODEL.DENSE_HEAD.NUM_HM_CONV: 2
2023-11-23 11:04:51,257   INFO  ----------- SEPARATE_HEAD_CFG -----------
2023-11-23 11:04:51,257   INFO  cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG.HEAD_ORDER: ['center', 'height', 'dim', 'rot', 'vel', 'iou']
2023-11-23 11:04:51,257   INFO  ----------- HEAD_DICT -----------
2023-11-23 11:04:51,257   INFO  ----------- center -----------
2023-11-23 11:04:51,258   INFO  cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG.HEAD_DICT.center.out_channels: 2
2023-11-23 11:04:51,258   INFO  cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG.HEAD_DICT.center.num_conv: 2
2023-11-23 11:04:51,258   INFO  ----------- height -----------
2023-11-23 11:04:51,258   INFO  cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG.HEAD_DICT.height.out_channels: 1
2023-11-23 11:04:51,258   INFO  cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG.HEAD_DICT.height.num_conv: 2
2023-11-23 11:04:51,259   INFO  ----------- dim -----------
2023-11-23 11:04:51,259   INFO  cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG.HEAD_DICT.dim.out_channels: 3
2023-11-23 11:04:51,259   INFO  cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG.HEAD_DICT.dim.num_conv: 2
2023-11-23 11:04:51,259   INFO  ----------- rot -----------
2023-11-23 11:04:51,259   INFO  cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG.HEAD_DICT.rot.out_channels: 2
2023-11-23 11:04:51,259   INFO  cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG.HEAD_DICT.rot.num_conv: 2
2023-11-23 11:04:51,260   INFO  ----------- vel -----------
2023-11-23 11:04:51,260   INFO  cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG.HEAD_DICT.vel.out_channels: 2
2023-11-23 11:04:51,260   INFO  cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG.HEAD_DICT.vel.num_conv: 2
2023-11-23 11:04:51,260   INFO  ----------- iou -----------
2023-11-23 11:04:51,260   INFO  cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG.HEAD_DICT.iou.out_channels: 1
2023-11-23 11:04:51,260   INFO  cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG.HEAD_DICT.iou.num_conv: 2
2023-11-23 11:04:51,261   INFO  ----------- TARGET_ASSIGNER_CONFIG -----------
2023-11-23 11:04:51,261   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.FEATURE_MAP_STRIDE: 2
2023-11-23 11:04:51,261   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.DATASET: nuScenes
2023-11-23 11:04:51,261   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.GAUSSIAN_OVERLAP: 0.1
2023-11-23 11:04:51,261   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.MIN_RADIUS: 2
2023-11-23 11:04:51,261   INFO  ----------- HUNGARIAN_ASSIGNER -----------
2023-11-23 11:04:51,261   INFO  ----------- cls_cost -----------
2023-11-23 11:04:51,262   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.HUNGARIAN_ASSIGNER.cls_cost.gamma: 2.0
2023-11-23 11:04:51,262   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.HUNGARIAN_ASSIGNER.cls_cost.alpha: 0.25
2023-11-23 11:04:51,262   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.HUNGARIAN_ASSIGNER.cls_cost.weight: 0.15
2023-11-23 11:04:51,262   INFO  ----------- reg_cost -----------
2023-11-23 11:04:51,262   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.HUNGARIAN_ASSIGNER.reg_cost.weight: 0.25
2023-11-23 11:04:51,263   INFO  ----------- iou_cost -----------
2023-11-23 11:04:51,263   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.HUNGARIAN_ASSIGNER.iou_cost.weight: 0.25
2023-11-23 11:04:51,263   INFO  ----------- LOSS_CONFIG -----------
2023-11-23 11:04:51,263   INFO  ----------- LOSS_WEIGHTS -----------
2023-11-23 11:04:51,263   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.cls_weight: 1.0
2023-11-23 11:04:51,263   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.bbox_weight: 0.25
2023-11-23 11:04:51,264   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.hm_weight: 1.0
2023-11-23 11:04:51,264   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.iou_weight: 0.5
2023-11-23 11:04:51,264   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.iou_reg_weight: 0.5
2023-11-23 11:04:51,264   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.code_weights: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2]
2023-11-23 11:04:51,264   INFO  ----------- LOSS_CLS -----------
2023-11-23 11:04:51,265   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_CLS.use_sigmoid: True
2023-11-23 11:04:51,265   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_CLS.gamma: 2.0
2023-11-23 11:04:51,265   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_CLS.alpha: 0.25
2023-11-23 11:04:51,265   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_IOU: True
2023-11-23 11:04:51,265   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_IOU_REG: True
2023-11-23 11:04:51,265   INFO  ----------- POST_PROCESSING -----------
2023-11-23 11:04:51,265   INFO  cfg.MODEL.DENSE_HEAD.POST_PROCESSING.SCORE_THRESH: 0.0
2023-11-23 11:04:51,266   INFO  cfg.MODEL.DENSE_HEAD.POST_PROCESSING.POST_CENTER_RANGE: [-61.2, -61.2, -10.0, 61.2, 61.2, 10.0]
2023-11-23 11:04:51,266   INFO  cfg.MODEL.DENSE_HEAD.POST_PROCESSING.USE_IOU_TO_RECTIFY_SCORE: True
2023-11-23 11:04:51,266   INFO  cfg.MODEL.DENSE_HEAD.POST_PROCESSING.IOU_RECTIFIER: [0.5]
2023-11-23 11:04:51,266   INFO  ----------- NMS_CONFIG -----------
2023-11-23 11:04:51,266   INFO  cfg.MODEL.DENSE_HEAD.NMS_CONFIG.NMS_TYPE: nms_gpu
2023-11-23 11:04:51,267   INFO  cfg.MODEL.DENSE_HEAD.NMS_CONFIG.NMS_THRESH: 0.2
2023-11-23 11:04:51,267   INFO  cfg.MODEL.DENSE_HEAD.NMS_CONFIG.NMS_PRE_MAXSIZE: 1000
2023-11-23 11:04:51,267   INFO  cfg.MODEL.DENSE_HEAD.NMS_CONFIG.NMS_POST_MAXSIZE: 100
2023-11-23 11:04:51,267   INFO  cfg.MODEL.DENSE_HEAD.NMS_CONFIG.SCORE_THRES: 0.0
2023-11-23 11:04:51,267   INFO  ----------- POST_PROCESSING -----------
2023-11-23 11:04:51,267   INFO  cfg.MODEL.POST_PROCESSING.RECALL_THRESH_LIST: [0.3, 0.5, 0.7]
2023-11-23 11:04:51,268   INFO  cfg.MODEL.POST_PROCESSING.SCORE_THRESH: 0.1
2023-11-23 11:04:51,268   INFO  cfg.MODEL.POST_PROCESSING.OUTPUT_RAW_SCORE: False
2023-11-23 11:04:51,268   INFO  cfg.MODEL.POST_PROCESSING.EVAL_METRIC: kitti
2023-11-23 11:04:51,268   INFO  ----------- NMS_CONFIG -----------
2023-11-23 11:04:51,268   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.MULTI_CLASSES_NMS: True
2023-11-23 11:04:51,269   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_TYPE: nms_gpu
2023-11-23 11:04:51,269   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_THRESH: 0.2
2023-11-23 11:04:51,269   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_PRE_MAXSIZE: 1000
2023-11-23 11:04:51,269   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_POST_MAXSIZE: 83
2023-11-23 11:04:51,269   INFO  ----------- OPTIMIZATION -----------
2023-11-23 11:04:51,269   INFO  cfg.OPTIMIZATION.BATCH_SIZE_PER_GPU: 3
2023-11-23 11:04:51,269   INFO  cfg.OPTIMIZATION.NUM_EPOCHS: 10
2023-11-23 11:04:51,270   INFO  cfg.OPTIMIZATION.OPTIMIZER: adam_onecycle
2023-11-23 11:04:51,270   INFO  cfg.OPTIMIZATION.LR: 0.003
2023-11-23 11:04:51,270   INFO  cfg.OPTIMIZATION.WEIGHT_DECAY: 0.03
2023-11-23 11:04:51,270   INFO  cfg.OPTIMIZATION.MOMENTUM: 0.9
2023-11-23 11:04:51,270   INFO  cfg.OPTIMIZATION.MOMS: [0.95, 0.85]
2023-11-23 11:04:51,271   INFO  cfg.OPTIMIZATION.PCT_START: 0.4
2023-11-23 11:04:51,271   INFO  cfg.OPTIMIZATION.DIV_FACTOR: 10
2023-11-23 11:04:51,271   INFO  cfg.OPTIMIZATION.DECAY_STEP_LIST: [35, 45]
2023-11-23 11:04:51,271   INFO  cfg.OPTIMIZATION.LR_DECAY: 0.1
2023-11-23 11:04:51,271   INFO  cfg.OPTIMIZATION.LR_CLIP: 1e-07
2023-11-23 11:04:51,271   INFO  cfg.OPTIMIZATION.LR_WARMUP: False
2023-11-23 11:04:51,272   INFO  cfg.OPTIMIZATION.WARMUP_EPOCH: 1
2023-11-23 11:04:51,272   INFO  cfg.OPTIMIZATION.GRAD_NORM_CLIP: 10
2023-11-23 11:04:51,272   INFO  cfg.OPTIMIZATION.LOSS_SCALE_FP16: 32
2023-11-23 11:04:51,272   INFO  ----------- HOOK -----------
2023-11-23 11:04:51,272   INFO  ----------- DisableAugmentationHook -----------
2023-11-23 11:04:51,272   INFO  cfg.HOOK.DisableAugmentationHook.DISABLE_AUG_LIST: ['gt_sampling']
2023-11-23 11:04:51,273   INFO  cfg.HOOK.DisableAugmentationHook.NUM_LAST_EPOCHS: 2
2023-11-23 11:04:51,273   INFO  cfg.TAG: unitr_cam
2023-11-23 11:04:51,273   INFO  cfg.EXP_GROUP_PATH: tools/cfgs/nuscenes_models
2023-11-23 11:04:51,282   INFO  ----------- Create dataloader & network & optimizer -----------
2023-11-23 11:04:51,609   INFO  Database filter by min points car: 4082 => 3303
2023-11-23 11:04:51,609   INFO  Database filter by min points truck: 451 => 412
2023-11-23 11:04:51,610   INFO  Database filter by min points construction_vehicle: 174 => 161
2023-11-23 11:04:51,610   INFO  Database filter by min points bus: 337 => 309
2023-11-23 11:04:51,610   INFO  Database filter by min points trailer: 59 => 57
2023-11-23 11:04:51,611   INFO  Database filter by min points barrier: 1851 => 1741
2023-11-23 11:04:51,611   INFO  Database filter by min points motorcycle: 179 => 149
2023-11-23 11:04:51,611   INFO  Database filter by min points bicycle: 147 => 136
2023-11-23 11:04:51,612   INFO  Database filter by min points pedestrian: 3068 => 2799
2023-11-23 11:04:51,613   INFO  Database filter by min points traffic_cone: 773 => 635
2023-11-23 11:04:51,615   INFO  Loading NuScenes dataset
2023-11-23 11:04:51,686   INFO  Total samples for NuScenes dataset: 323
2023-11-23 11:04:51,708   INFO  Total samples after balanced resampling: 1630
2023-11-23 11:05:03,346   INFO  ----------- Model UniTRCAM created, param count: 12093279 -----------
2023-11-23 11:05:03,346   INFO  UniTRCAM(
  (vfe): DynamicPillarVFE(
    (pfn_layers): ModuleList(
      (0): PFNLayerV2(
        (linear): Linear(in_features=11, out_features=64, bias=False)
        (norm): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU()
      )
      (1): PFNLayerV2(
        (linear): Linear(in_features=128, out_features=128, bias=False)
        (norm): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU()
      )
    )
  )
  (mm_backbone): UniTRCAM(
    (image_input_layer): UniTRInputLayer(
      (posembed_layers): ModuleList(
        (0): ModuleList(
          (0): ModuleList(
            (0): PositionEmbeddingLearned(
              (position_embedding_head): Sequential(
                (0): Linear(in_features=2, out_features=128, bias=True)
                (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Linear(in_features=128, out_features=128, bias=True)
              )
            )
            (1): PositionEmbeddingLearned(
              (position_embedding_head): Sequential(
                (0): Linear(in_features=2, out_features=128, bias=True)
                (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Linear(in_features=128, out_features=128, bias=True)
              )
            )
          )
          (1): ModuleList(
            (0): PositionEmbeddingLearned(
              (position_embedding_head): Sequential(
                (0): Linear(in_features=2, out_features=128, bias=True)
                (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Linear(in_features=128, out_features=128, bias=True)
              )
            )
            (1): PositionEmbeddingLearned(
              (position_embedding_head): Sequential(
                (0): Linear(in_features=2, out_features=128, bias=True)
                (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Linear(in_features=128, out_features=128, bias=True)
              )
            )
          )
          (2): ModuleList(
            (0): PositionEmbeddingLearned(
              (position_embedding_head): Sequential(
                (0): Linear(in_features=2, out_features=128, bias=True)
                (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Linear(in_features=128, out_features=128, bias=True)
              )
            )
            (1): PositionEmbeddingLearned(
              (position_embedding_head): Sequential(
                (0): Linear(in_features=2, out_features=128, bias=True)
                (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Linear(in_features=128, out_features=128, bias=True)
              )
            )
          )
          (3): ModuleList(
            (0): PositionEmbeddingLearned(
              (position_embedding_head): Sequential(
                (0): Linear(in_features=2, out_features=128, bias=True)
                (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Linear(in_features=128, out_features=128, bias=True)
              )
            )
            (1): PositionEmbeddingLearned(
              (position_embedding_head): Sequential(
                (0): Linear(in_features=2, out_features=128, bias=True)
                (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Linear(in_features=128, out_features=128, bias=True)
              )
            )
          )
        )
      )
    )
    (lidar_input_layer): UniTRInputLayer(
      (posembed_layers): ModuleList(
        (0): ModuleList(
          (0): ModuleList(
            (0): PositionEmbeddingLearned(
              (position_embedding_head): Sequential(
                (0): Linear(in_features=2, out_features=128, bias=True)
                (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Linear(in_features=128, out_features=128, bias=True)
              )
            )
            (1): PositionEmbeddingLearned(
              (position_embedding_head): Sequential(
                (0): Linear(in_features=2, out_features=128, bias=True)
                (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Linear(in_features=128, out_features=128, bias=True)
              )
            )
          )
          (1): ModuleList(
            (0): PositionEmbeddingLearned(
              (position_embedding_head): Sequential(
                (0): Linear(in_features=2, out_features=128, bias=True)
                (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Linear(in_features=128, out_features=128, bias=True)
              )
            )
            (1): PositionEmbeddingLearned(
              (position_embedding_head): Sequential(
                (0): Linear(in_features=2, out_features=128, bias=True)
                (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Linear(in_features=128, out_features=128, bias=True)
              )
            )
          )
          (2): ModuleList(
            (0): PositionEmbeddingLearned(
              (position_embedding_head): Sequential(
                (0): Linear(in_features=2, out_features=128, bias=True)
                (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Linear(in_features=128, out_features=128, bias=True)
              )
            )
            (1): PositionEmbeddingLearned(
              (position_embedding_head): Sequential(
                (0): Linear(in_features=2, out_features=128, bias=True)
                (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Linear(in_features=128, out_features=128, bias=True)
              )
            )
          )
          (3): ModuleList(
            (0): PositionEmbeddingLearned(
              (position_embedding_head): Sequential(
                (0): Linear(in_features=2, out_features=128, bias=True)
                (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Linear(in_features=128, out_features=128, bias=True)
              )
            )
            (1): PositionEmbeddingLearned(
              (position_embedding_head): Sequential(
                (0): Linear(in_features=2, out_features=128, bias=True)
                (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
                (3): Linear(in_features=128, out_features=128, bias=True)
              )
            )
          )
        )
      )
    )
    (patch_embed): PatchEmbed(
      (adap_padding): AdaptivePadding()
      (projection): Conv2d(3, 128, kernel_size=(8, 8), stride=(8, 8))
      (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
    (stage_0): ModuleList(
      (0): UniTRBlock(
        (encoder_list): ModuleList(
          (0): UniTR_EncoderLayer(
            (win_attn): SetAttention(
              (self_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
              )
              (linear1): Linear(in_features=128, out_features=256, bias=True)
              (dropout): Dropout(p=0, inplace=False)
              (linear2): Linear(in_features=256, out_features=128, bias=True)
              (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
              (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
              (lidar_linear1): Linear(in_features=128, out_features=256, bias=True)
              (lidar_dropout): Dropout(p=0, inplace=False)
              (lidar_linear2): Linear(in_features=256, out_features=128, bias=True)
              (lidar_norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
              (lidar_norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
              (dropout1): Identity()
              (dropout2): Identity()
            )
            (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          )
          (1): UniTR_EncoderLayer(
            (win_attn): SetAttention(
              (self_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
              )
              (linear1): Linear(in_features=128, out_features=256, bias=True)
              (dropout): Dropout(p=0, inplace=False)
              (linear2): Linear(in_features=256, out_features=128, bias=True)
              (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
              (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
              (lidar_linear1): Linear(in_features=128, out_features=256, bias=True)
              (lidar_dropout): Dropout(p=0, inplace=False)
              (lidar_linear2): Linear(in_features=256, out_features=128, bias=True)
              (lidar_norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
              (lidar_norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
              (dropout1): Identity()
              (dropout2): Identity()
            )
            (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
      (1): UniTRBlock(
        (encoder_list): ModuleList(
          (0): UniTR_EncoderLayer(
            (win_attn): SetAttention(
              (self_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
              )
              (linear1): Linear(in_features=128, out_features=256, bias=True)
              (dropout): Dropout(p=0, inplace=False)
              (linear2): Linear(in_features=256, out_features=128, bias=True)
              (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
              (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
              (lidar_linear1): Linear(in_features=128, out_features=256, bias=True)
              (lidar_dropout): Dropout(p=0, inplace=False)
              (lidar_linear2): Linear(in_features=256, out_features=128, bias=True)
              (lidar_norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
              (lidar_norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
              (dropout1): Identity()
              (dropout2): Identity()
            )
            (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          )
          (1): UniTR_EncoderLayer(
            (win_attn): SetAttention(
              (self_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
              )
              (linear1): Linear(in_features=128, out_features=256, bias=True)
              (dropout): Dropout(p=0, inplace=False)
              (linear2): Linear(in_features=256, out_features=128, bias=True)
              (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
              (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
              (lidar_linear1): Linear(in_features=128, out_features=256, bias=True)
              (lidar_dropout): Dropout(p=0, inplace=False)
              (lidar_linear2): Linear(in_features=256, out_features=128, bias=True)
              (lidar_norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
              (lidar_norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
              (dropout1): Identity()
              (dropout2): Identity()
            )
            (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
      (2): UniTRBlock(
        (encoder_list): ModuleList(
          (0): UniTR_EncoderLayer(
            (win_attn): SetAttention(
              (self_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
              )
              (linear1): Linear(in_features=128, out_features=256, bias=True)
              (dropout): Dropout(p=0, inplace=False)
              (linear2): Linear(in_features=256, out_features=128, bias=True)
              (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
              (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
              (lidar_linear1): Linear(in_features=128, out_features=256, bias=True)
              (lidar_dropout): Dropout(p=0, inplace=False)
              (lidar_linear2): Linear(in_features=256, out_features=128, bias=True)
              (lidar_norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
              (lidar_norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
              (dropout1): Identity()
              (dropout2): Identity()
            )
            (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          )
          (1): UniTR_EncoderLayer(
            (win_attn): SetAttention(
              (self_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
              )
              (linear1): Linear(in_features=128, out_features=256, bias=True)
              (dropout): Dropout(p=0, inplace=False)
              (linear2): Linear(in_features=256, out_features=128, bias=True)
              (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
              (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
              (lidar_linear1): Linear(in_features=128, out_features=256, bias=True)
              (lidar_dropout): Dropout(p=0, inplace=False)
              (lidar_linear2): Linear(in_features=256, out_features=128, bias=True)
              (lidar_norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
              (lidar_norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
              (dropout1): Identity()
              (dropout2): Identity()
            )
            (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
      (3): UniTRBlock(
        (encoder_list): ModuleList(
          (0): UniTR_EncoderLayer(
            (win_attn): SetAttention(
              (self_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
              )
              (linear1): Linear(in_features=128, out_features=256, bias=True)
              (dropout): Dropout(p=0, inplace=False)
              (linear2): Linear(in_features=256, out_features=128, bias=True)
              (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
              (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
              (lidar_linear1): Linear(in_features=128, out_features=256, bias=True)
              (lidar_dropout): Dropout(p=0, inplace=False)
              (lidar_linear2): Linear(in_features=256, out_features=128, bias=True)
              (lidar_norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
              (lidar_norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
              (dropout1): Identity()
              (dropout2): Identity()
            )
            (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          )
          (1): UniTR_EncoderLayer(
            (win_attn): SetAttention(
              (self_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
              )
              (linear1): Linear(in_features=128, out_features=256, bias=True)
              (dropout): Dropout(p=0, inplace=False)
              (linear2): Linear(in_features=256, out_features=128, bias=True)
              (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
              (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
              (lidar_linear1): Linear(in_features=128, out_features=256, bias=True)
              (lidar_dropout): Dropout(p=0, inplace=False)
              (lidar_linear2): Linear(in_features=256, out_features=128, bias=True)
              (lidar_norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
              (lidar_norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
              (dropout1): Identity()
              (dropout2): Identity()
            )
            (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (residual_norm_stage_0): ModuleList(
      (0): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
      (2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
      (3): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
    (lidar_residual_norm_stage_0): ModuleList(
      (0): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
      (1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
      (2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
      (3): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
    )
  )
  (map_to_bev_module): PointPillarScatter3d()
  (neck): None
  (vtransform): None
  (fuser): None
  (backbone_2d): BaseBEVResBackbone(
    (blocks): ModuleList(
      (0): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu1): ReLU()
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu2): ReLU()
          (downsample_layer): Sequential(
            (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu1): ReLU()
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu2): ReLU()
        )
      )
      (1): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu1): ReLU()
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu2): ReLU()
          (downsample_layer): Sequential(
            (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu1): ReLU()
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu2): ReLU()
        )
        (2): BasicBlock(
          (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu1): ReLU()
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu2): ReLU()
        )
      )
      (2): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu1): ReLU()
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu2): ReLU()
          (downsample_layer): Sequential(
            (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu1): ReLU()
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu2): ReLU()
        )
        (2): BasicBlock(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu1): ReLU()
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu2): ReLU()
        )
      )
      (3): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu1): ReLU()
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu2): ReLU()
          (downsample_layer): Sequential(
            (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu1): ReLU()
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu2): ReLU()
        )
        (2): BasicBlock(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu1): ReLU()
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu2): ReLU()
        )
      )
    )
    (deblocks): ModuleList(
      (0): Sequential(
        (0): Conv2d(128, 128, kernel_size=(2, 2), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (1): Sequential(
        (0): ConvTranspose2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (2): Sequential(
        (0): ConvTranspose2d(256, 128, kernel_size=(2, 2), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (3): Sequential(
        (0): ConvTranspose2d(256, 128, kernel_size=(4, 4), stride=(4, 4), bias=False)
        (1): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
  )
  (dense_head): TransFusionHead(
    (loss_cls): SigmoidFocalClassificationLoss()
    (loss_bbox): L1Loss()
    (loss_heatmap): GaussianFocalLoss()
    (shared_conv): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (heatmap_head): Sequential(
      (0): BasicBlock2D(
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (1): Conv2d(128, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (class_encoding): Conv1d(10, 128, kernel_size=(1,), stride=(1,))
    (decoder): TransformerDecoderLayer(
      (self_attn): MultiheadAttention(
        (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
      )
      (multihead_attn): MultiheadAttention(
        (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
      )
      (linear1): Linear(in_features=128, out_features=256, bias=True)
      (dropout): Dropout(p=0.1, inplace=False)
      (linear2): Linear(in_features=256, out_features=128, bias=True)
      (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
      (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
      (norm3): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
      (dropout1): Dropout(p=0.1, inplace=False)
      (dropout2): Dropout(p=0.1, inplace=False)
      (dropout3): Dropout(p=0.1, inplace=False)
      (self_posembed): PositionEmbeddingLearned(
        (position_embedding_head): Sequential(
          (0): Conv1d(2, 128, kernel_size=(1,), stride=(1,))
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
        )
      )
      (cross_posembed): PositionEmbeddingLearned(
        (position_embedding_head): Sequential(
          (0): Conv1d(2, 128, kernel_size=(1,), stride=(1,))
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
        )
      )
    )
    (prediction_head): SeparateHead_Transfusion(
      (center): Sequential(
        (0): Sequential(
          (0): Conv1d(128, 64, kernel_size=(1,), stride=(1,))
          (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): Conv1d(64, 2, kernel_size=(1,), stride=(1,))
      )
      (height): Sequential(
        (0): Sequential(
          (0): Conv1d(128, 64, kernel_size=(1,), stride=(1,))
          (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): Conv1d(64, 1, kernel_size=(1,), stride=(1,))
      )
      (dim): Sequential(
        (0): Sequential(
          (0): Conv1d(128, 64, kernel_size=(1,), stride=(1,))
          (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): Conv1d(64, 3, kernel_size=(1,), stride=(1,))
      )
      (rot): Sequential(
        (0): Sequential(
          (0): Conv1d(128, 64, kernel_size=(1,), stride=(1,))
          (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): Conv1d(64, 2, kernel_size=(1,), stride=(1,))
      )
      (vel): Sequential(
        (0): Sequential(
          (0): Conv1d(128, 64, kernel_size=(1,), stride=(1,))
          (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): Conv1d(64, 2, kernel_size=(1,), stride=(1,))
      )
      (iou): Sequential(
        (0): Sequential(
          (0): Conv1d(128, 64, kernel_size=(1,), stride=(1,))
          (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): Conv1d(64, 1, kernel_size=(1,), stride=(1,))
      )
      (heatmap): Sequential(
        (0): Sequential(
          (0): Conv1d(128, 64, kernel_size=(1,), stride=(1,))
          (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): Conv1d(64, 10, kernel_size=(1,), stride=(1,))
      )
    )
  )
)
2023-11-23 11:05:03,370   INFO  **********************Start training tools/cfgs/nuscenes_models/unitr_cam(default)**********************
